//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        mo_2_cmd_alt: mo_2_cmd_alt {
            compatible = "zmk,behavior-mod-morph";
            label = "MO_2_CMD_ALT";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&kp LALT>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        // for cmd + alt + I

        trans_i: trans_i {
            compatible = "zmk,behavior-mod-morph";
            label = "TRANS_I";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp LA(I)>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        trans_alt_c: trans_alt_c {
            compatible = "zmk,behavior-mod-morph";
            label = "TRANS_ALT_C";
            #binding-cells = <0>;
            bindings = <&kp LG(N3)>, <&kp C>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        trans_alt_v: trans_alt_v {
            compatible = "zmk,behavior-mod-morph";
            label = "TRANS_ALT_V";
            #binding-cells = <0>;
            bindings = <&kp LG(N4)>, <&kp V>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        hold_tap_magic: hold_tap_magic {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_MAGIC";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <130>;
            hold-while-undecided;
            flavor = "hold-preferred";
        };

        hold_tap_ctrl: hold_tap_ctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_ctrl";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <110>;
            hold-while-undecided;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <1 4 5 17 16 15 14 13 25 26 27 28 29 30 18 6 7 19 31 32 20 8 9 21 34 22 33 10 35 24 36 37 38 39 41 40 14 15 16 26 27 28 36 0 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 32 33 34 35 36 37>;
        };

        mod_q: mod_q {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_Q";
            bindings = <&kp Q>, <&kp TAB>;

            #binding-cells = <0>;
            keep-mods = <(MOD_LGUI|MOD_LSFT|MOD_LCTL)>;
            mods = <(MOD_LGUI|MOD_LCTL)>;
        };

        mo_tapper: mo_tapper {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TAPPER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            quick-tap-ms = <75>;
        };
    };

    macros {
        vim_copy_clipboard: vim_copy_clipboard {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp PLUS &kp Y>;
            label = "VIM_COPY_CLIPBOARD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

            bindings = <
                                &mod_q                  &kp W  &kp E          &kp R     &kp T        &kp Y    &kp U               &kp I                               &kp O    &kp P
                                &kp A                   &kp S  &kp D          &kp F     &kp G        &kp H    &kp J               &kp K                               &kp L    &kp SEMI
&hold_tap_magic LEFT_SHIFT ESC  &hold_tap_ctrl LCTRL Z  &kp X  &kp C          &kp V     &kp B        &kp N    &kp M               &kp COMMA                           &kp DOT  &kp FSLH  &kp BACKSLASH
                                                               &mo_2_cmd_alt  &kp LGUI  &kp SPACE    &kp RET  &mo_tapper 1 MINUS  &hold_tap_magic LEFT_COMMAND GRAVE
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        fn_layer_1 {
            bindings = <
        &kp LC(Q)  &kp LC(W)  &trans    &trans    &trans    &kp LC(CARET)     &kp MINUS          &kp EQUAL  &kp GRAVE  &kp BACKSPACE
        &trans     &trans     &kp LBKT  &kp RBKT  &trans    &kp LEFT          &kp DOWN           &kp UP     &kp RIGHT  &kp DEL
&trans  &kp LC(Z)  &trans     &trans    &trans    &trans    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp HOME   &kp END    &trans         &kp C_PP
                              &kp LALT  &trans    &trans    &mo 3             &trans             &kp LC(M)
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        fn_layer_2 {
            bindings = <
                &kp N1      &kp N2        &kp N3        &kp N4        &kp N5        &kp N6  &kp N7  &trans_i  &kp N9  &kp N0
                &kp TAB     &kp C_VOL_DN  &kp C_VOL_UP  &trans        &trans        &trans  &trans  &trans    &trans  &kp SQT
&kp LEFT_SHIFT  &kp LG(N1)  &kp LG(N2)    &trans_alt_c  &trans_alt_v  &kp LG(N5)    &trans  &trans  &trans    &trans  &trans   &trans
                                          &trans        &trans        &mo 3         &trans  &mo 4   &trans
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        fn_layer_3 {
            bindings = <
        &kp LG(Q)     &bt BT_SEL 1  &bt BT_SEL 2         &bt BT_SEL 3  &bt BT_SEL 4     &trans  &trans  &trans  &trans  &kp LA(BACKSPACE)
        &out OUT_USB  &out OUT_BLE  &kp CAPSLOCK         &trans        &bt BT_CLR       &trans  &trans  &trans  &trans  &trans
&trans  &trans        &kp F2        &vim_copy_clipboard  &kp F4        &kp LG(LC(Q))    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10            &sys_reset
                                    &trans               &trans        &trans           &trans  &trans  &trans
            >;
        };

        fn_layer_4 {
            bindings = <
               &kp LG(Q)  &none  &none  &none  &none    &none  &none  &none  &none  &kp LA(BACKSPACE)
               &none      &none  &none  &none  &none    &none  &none  &none  &none  &none
&kp LG(LC(Q))  &none      &none  &none  &none  &none    &none  &none  &none  &none  &none              &none
                                 &none  &none  &none    &none  &none  &none
            >;
        };
    };
};

