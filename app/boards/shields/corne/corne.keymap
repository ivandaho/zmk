/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
		    rgb_mo_1: rgb_mo_1 {
            label = "rgb_mo_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
						wait-ms = <0>;
						tap-ms = <0>;
            bindings
							= <&macro_press &mo 1>
							, <&macro_tap &rgb_ug RGB_COLOR_HSB(305,61,94)>
							, <&macro_pause_for_release>
							, <&macro_release &mo 1>
							, <&macro_tap &rgb_ug RGB_COLOR_HSB(180,100,50)>;
        };

		    rgb_mo_2: rgb_mo_2 {
            label = "rgb_mo_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
						wait-ms = <0>;
						tap-ms = <0>;
            bindings
							= <&macro_press &mo 2>
							, <&macro_tap &rgb_ug RGB_COLOR_HSB(223,91,98)>
							, <&macro_pause_for_release>
							, <&macro_release &mo 2>
							, <&macro_tap &rgb_ug RGB_COLOR_HSB(180,100,50)>;
        };
			};
	};

/ {
  behaviors {
      // ignore play/pause if shift is held down
      undsc: undsc {
          compatible = "zmk,behavior-mod-morph";
          label = "UNDSC";
          #binding-cells = <0>;
          bindings = <&kp C_PLAY_PAUSE>, <&kp MINUS>;
          mods = <(MOD_LSFT)>;
          keep-mods = <(MOD_LSFT)>;
      };
      // cmd alt
      cmd_alt: cmd_alt {
          compatible = "zmk,behavior-mod-morph";
          label = "CMD_ALT";
          #binding-cells = <0>;
          bindings = <&mo 2>, <&kp LALT>;
          mods = <(MOD_LGUI)>;
          keep-mods = <(MOD_LGUI)>;
      };
      // for cmd + alt + I
      transi: transi {
          compatible = "zmk,behavior-mod-morph";
          label = "TRANS_I";
          #binding-cells = <0>;
          bindings = <&kp N8>, <&kp LA(I)>;
          mods = <(MOD_LGUI)>;
          keep-mods = <(MOD_LGUI)>;
      };
      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS";
          #binding-cells = <2>;
          tapping-term-ms = <250>;
          quick_tap_ms = <0>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
      };
      hm2: homerow_mods_tog {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS_TOG";
          #binding-cells = <2>;
          tapping-term-ms = <250>;
          quick_tap_ms = <0>;
          flavor = "tap-preferred";
          bindings = <&tog>, <&kp>;
      };

      trans_alt_z: trans_alt_z {
          compatible = "zmk,behavior-mod-morph";
          label = "TRANS_ALT_Z";
          #binding-cells = <0>;
          bindings = <&kp LG(N1)>, <&kp Z>;
          mods = <(MOD_LGUI)>;
          keep-mods = <(MOD_LGUI)>;
      };
      trans_alt_x: trans_alt_x {
          compatible = "zmk,behavior-mod-morph";
          label = "TRANS_ALT_X";
          #binding-cells = <0>;
          bindings = <&kp LG(N2)>, <&kp X>;
          mods = <(MOD_LGUI)>;
          keep-mods = <(MOD_LGUI)>;
      };
      trans_alt_c: trans_alt_c {
          compatible = "zmk,behavior-mod-morph";
          label = "TRANS_ALT_C";
          #binding-cells = <0>;
          bindings = <&kp LG(N3)>, <&kp C>;
          mods = <(MOD_LGUI)>;
          keep-mods = <(MOD_LGUI)>;
      };
      trans_alt_v: trans_alt_v {
          compatible = "zmk,behavior-mod-morph";
          label = "TRANS_ALT_V";
          #binding-cells = <0>;
          bindings = <&kp LG(N4)>, <&kp V>;
          mods = <(MOD_LGUI)>;
          keep-mods = <(MOD_LGUI)>;
      };
      trans_alt_b: trans_alt_b {
          compatible = "zmk,behavior-mod-morph";
          label = "TRANS_ALT_B";
          #binding-cells = <0>;
          bindings = <&kp LG(N5)>, <&kp B>;
          mods = <(MOD_LGUI)>;
          keep-mods = <(MOD_LGUI)>;
      };
      esc_tab: esc_tab {
          compatible = "zmk,behavior-mod-morph";
          label = "ESC_TAB";
          #binding-cells = <0>;
          bindings = <&kp ESC>, <&kp TAB>;
          mods = <(MOD_LCTL|MOD_LGUI)>;
          keep-mods = <(MOD_LCTL|MOD_LGUI)>;
      };
  };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &esc_tab  &kp Q &kp W    &kp E     &kp R      &kp T   &kp Y     &kp U     &kp I     &kp O   &kp P    &kp BSLH
   &kp LCTRL &kp A &kp S    &kp D     &kp F      &kp G   &kp H     &kp J     &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X    &kp C     &kp V      &kp B   &kp N     &kp M     &kp COMMA &kp DOT &kp FSLH &kp MINUS
                   &cmd_alt &kp LGUI  &kp SPACE  &kp RET &rgb_mo_1 &kp GRAVE
                        >;
                };
		fn_layer_1 {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
&kp ESC  &trans    &trans   &trans   &trans   &trans    &sk RGUI     &kp F12      &kp EQUAL  &kp LBKT   &kp RBKT    &kp BSPC
&trans   &trans    &trans   &trans   &trans   &trans    &kp LEFT     &kp DOWN     &kp UP     &kp RIGHT  &kp PG_UP   &kp DEL
&trans   &trans    &trans   &trans   &trans   &trans    &kp C_VOL_DN &kp C_VOL_UP &kp HOME   &kp END    &kp PG_DN   &undsc
                            &kp LALT &trans   &trans    &mo 3        &trans       &kp LC(M)
                        >;
                };

		fn_layer_2 {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
&kp TAB  &kp N1     &kp N2     &kp N3       &kp N4       &kp N5     &kp N6  &kp N7  &transi  &kp N9  &kp N0  &kp LA(BSPC)
&trans   &trans     &trans     &trans       &trans       &trans     &trans  &trans  &trans  &trans  &kp F1  &kp LALT
&trans   &kp LG(N1) &kp LG(N2) &trans_alt_c &trans_alt_v &kp LG(N5) &kp F6  &kp F7  &kp F8  &kp F9  &kp F10 &kp F11
                    &trans     &trans       &mo 3       &trans     &trans  &trans
                        >;
                };

		fn_layer_3 {
			bindings = <
    &trans      &bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3                      &bt BT_SEL 4                &rgb_ug RGB_SPD   &rgb_ug RGB_SPI   &rgb_ug RGB_EFF   &rgb_ug RGB_BRD   &rgb_ug RGB_BRI    &rgb_ug RGB_COLOR_HSB(4,70,98)
    &bootloader &out OUT_USB &out OUT_BLE  &rgb_ug RGB_TOG &rgb_ug RGB_COLOR_HSB(86,81,85)   &bt BT_CLR                  &bt BT_CLR        &trans            &rgb_ug RGB_TOG   &trans            &trans             &bootloader
    &sys_reset      &kp F1       &kp F2        &kp F3          &kp F4                            &kp F5                      &kp F6            &kp F7            &kp F8            &kp F9            &kp F10            &sys_reset
                                       &trans          &trans                                &trans                      &trans            &trans            &trans
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
		};
  };
};
